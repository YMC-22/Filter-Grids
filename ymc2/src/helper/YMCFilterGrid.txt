YMC — префикс бренда/плагина, помогает избежать конфликтов;
YMCFilterGrid — чётко указывает, чем объект управляет;
CamelCase — стандартный стиль для JS-глобальных объектов;
Можно легко расширять методами: init, setFilter, fetch, render, и т.д.


=== ОПИСАНИЕ ОБЪЕКТА YMCFilterGrid ===

1. YMCFilterGrid.init(container)
Инициализирует объект, устанавливая селектор контейнера сетки, в котором будет происходить фильтрация.

Параметры:
container (string)
CSS-селектор DOM-элемента, в который будет загружаться отфильтрованный список постов.
Например: '#ymc-filter-1' или '.my-filter-grid'.

Поведение:
Если параметр container передан, он сохраняется в конфигурации объекта this.config.container.
Этот контейнер должен существовать в DOM до вызова фильтрации (setFilter, fetchFilteredPosts и т.д.).
Если container не передан, используется значение по умолчанию: '#ymc-1'.

Пример использования:
YMCFilterGrid.init('#ymc1'); // теперь фильтрация будет применяться к #posts-grid

---------------------------

2. YMCFilterGrid.filterByTerm(taxonomy, termId, sendRequest = true)

Фильтрует посты по массиву таксономий и соответствующих им term ID, с возможностью управлять отправкой запроса на обновление сетки.

Параметры:
- taxonomy (string)
Строка с перечнем имён таксономий, разделённых запятыми.
Например: 'category, post_tag'
➤ Будет преобразовано в массив ['category', 'post_tag'].

- termId (string)
Строка с перечнем term_id, разделённых запятыми.
Например: '12,34'
➤ Будет преобразовано в массив ['12', '34'].

- sendRequest (boolean, необязательный, по умолчанию true)
Определяет, должен ли метод инициировать обновление сетки (вызов fetchFilteredPosts).
➤ true — сразу применить фильтр и отправить запрос.
➤ false — только сохранить фильтры в конфиге без запроса (например, для батчевой фильтрации).


Пример использования:
// применит фильтры и отправит запрос
YMCFilterGrid.filterByTerm('category, post_tag', '12,34');

// применит фильтр, но НЕ отправит запрос (например, для подготовки)
YMCFilterGrid.filterByTerm('category', '12', false);

---------------------------

3. YMCFilterGrid.filterByPostStatus(status, sendRequest = true)
Устанавливает фильтрацию записей по статусу публикации (post_status) и инициирует AJAX-запрос, если требуется.

Аргументы:
status (string) – статус поста, по которому нужно отфильтровать. Допустимые значения:

'publish' — опубликованные
'draft' — черновики
'pending' — ожидают модерации
'future' — запланированные
'private' — приватные
'trash' — в корзине (если разрешено)

sendRequest (boolean, по умолчанию true) – если true, сразу отправляется AJAX-запрос.
Если false, только обновляются параметры фильтра без запроса.

// Показываем только черновики
YMCFilterGrid.filterByPostStatus('draft');

// Устанавливаем статус, но без отправки запроса
YMCFilterGrid.filterByPostStatus('pending', false);

---------------------------

4. YMCFilterGrid.sortPosts()
Сортирует посты по различным критериям, включая стандартные поля (date, title, и т.д.), произвольные поля (meta_key),
а также множественные поля (multiple_fields).

Сигнатура:
sortPosts(orderBy, orderDirection = 'desc', options = {})

Аргументы:
| Параметр                 | Тип       | Обязательный             | Описание                                                                         |
| ------------------------ | --------- | -----------------------  | -------------------------------------------------------------------------------- |
| `orderBy`                | `string`  | ✅                       | Ключ сортировки: `'date'`, `'title'`, `'meta_key'`, `'multiple_fields'`, и т.д.  |
| `orderDirection`         | `string`  | ❌                       | Направление сортировки: `'asc'` или `'desc'` (по умолчанию `'asc'`)              |
| `options`                | `object`  | ❌                       | Дополнительные параметры для специфичных типов сортировки                        |
| `options.metaKey`        | `string`  | для `'meta_key'`         | Название `meta_key`, по которому будет сортировка                                |
| `options.metaValue`      | `string`  | ❌                       | Способ сортировки по мета-значению: `'meta_value'`, `'meta_value_num'` и т.д.    |
| `options.multipleFields` | `Array`   | для `'multiple_fields'`  | Массив объектов вида `{ field_name: string, order_type: string }`                |
| `options.sendRequest`    | `boolean` | ❌                       | Отправлять ли запрос сразу. По умолчанию `true`                                  |

Примеры использования:
Сортировка по дате:
YMCFilterGrid.sortPosts('date', 'desc');

Сортировка по мета-ключу (meta_key):
YMCFilterGrid.sortPosts('meta_key', 'asc', {
    metaKey: 'rating',
    metaValue: 'meta_value_num'
});

Сортировка по нескольким полям (multiple_fields):
YMCFilterGrid.sortPosts('multiple_fields', null, {
    multipleFields: [
        { field_name: 'menu_order', order_type: 'asc' },
        { field_name: 'date', order_type: 'desc' }
    ]
});

---------------------------

5. YMCFilterGrid.filterByMeta(metaQuery, relation = 'AND', sendRequest = true)

Фильтрует посты по произвольным полям (postmeta), используя meta_query WordPress.
Метод позволяет указать массив условий, по которым будут отобраны записи на сервере, а также задать логическую
связь между этими условиями (AND или OR).

Параметры:

Массив условий для фильтрации. Каждый элемент массива — объект с полями:
key (string) — ключ мета-поля (meta_key)
value (string|number) — значение мета-поля (meta_value)
compare (string, необязательный, по умолчанию "=") — оператор сравнения (=, !=, <, >, IN, LIKE, и т. д.)
type (string, необязательный, по умолчанию "CHAR") — тип данных (CHAR, NUMERIC, DATE, и т. д.)

relation (string, необязательный, по умолчанию "AND")
Логическая связь между условиями:
"OR" — хотя бы одно условие выполняется
"AND" — все условия должны быть выполнены

sendRequest (boolean, необязательный, по умолчанию true)
Отправлять ли AJAX-запрос сразу после применения фильтров.

Пример использования:
YMCFilterGrid.filterByMeta([
  {
    key: 'color',
    value: 'blue',
    compare: '=',
    type: 'CHAR'
  },
  {
    key: 'price',
    value: 100,
    compare: '<=',
    type: 'NUMERIC'
  }
], 'AND');
Отберёт посты, у которых мета-поле color равно blue и price меньше или равно 100.

---------------------------

6. YMCFilterGrid.filterByDate(dateQuery, sendRequest = true)

Метод filterByDate() используется для фильтрации постов по дате публикации с помощью параметров WordPress date_query.

Сигнатура:
YMCFilterGrid.filterByDate(dateQuery, sendRequest = true)

| Параметр      | Тип       | Описание                                                      |
| ------------- | --------- | ------------------------------------------------------------- |
| `dateQuery`   | `object`  | Массив параметров `date_query`, совместимый с WP\_Query       |
| `sendRequest` | `boolean` | Опционально: отправлять ли запрос сразу (по умолчанию `true`) |

Поддерживаемые параметры dateQuery:
Вы можете передать следующие параметры:

| Ключ        | Тип                   | Пример                                                  | Описание                          |
| ----------- | --------------------- | ------------------------------------------------------- | --------------------------------- |
| `after`     | `string` или `object` | `'2023-01-01'` или `{ year: 2023, month: 1, day: 1 }`   | Дата начала диапазона             |
| `before`    | `string` или `object` | `'2023-12-31'` или `{ year: 2023, month: 12, day: 31 }` | Дата окончания диапазона          |
| `inclusive` | `boolean`             | `true` или `false`                                      | Включительно ли границы диапазона |
| `column`    | `string`              | `'post_date'`, `'post_modified'`                        | По какому столбцу фильтровать     |
| `compare`   | `string`              | `'='`, `'>'`, `'<'`, `BETWEEN` и т.д.                   | Оператор сравнения                |


Обрати внимание, что date_query должен быть передан из фронтенда в формате, совместимом с WP_Query, например:
[
    'after'     => '2023-01-01',
    'before'    => '2023-12-31',
    'inclusive' => true,
]

Примеры использования:
1. Диапазон между двумя датами (строковый формат):
YMCFilterGrid.filterByDate({
    after: '2023-01-01',
    before: '2023-12-31',
    inclusive: true
});

2. По конкретной дате с объектом:
YMCFilterGrid.filterByDate({
    after: { year: 2024, month: 6, day: 1 },
    before: { year: 2024, month: 6, day: 14 },
    inclusive: true
});
3. Только после определенной даты:
YMCFilterGrid.filterByDate({
    after: '2024-01-01'
});

4. Пример с использованием relation: 'OR'
YMCFilterGrid.filterByDate({
  relation: 'OR',
  0: {
    after: '2024-01-01',
    before: '2024-01-31',
    inclusive: true
  },
  1: {
    after: '2024-05-01',
    before: '2024-05-31',
    inclusive: true
  }
});
Он вернёт посты, которые:
или опубликованы в январе 2024 года, или опубликованы в мае 2024 года.

5. Пример с relation: 'AND'
YMCFilterGrid.filterByDate({
  relation: 'AND',
  0: {
    column: 'post_date_gmt',
    after: '2024-01-01',
    inclusive: true
  },
  1: {
    column: 'post_modified',
    before: '2024-06-01',
    inclusive: true
  }
});
Ищет посты, которые:
опубликованы после 1 января 2024 года, и изменены до 1 июня 2024 года.

Важно: массив условий передаётся как объект с числовыми ключами (0, 1, ...), чтобы сохранить порядок при сериализации и
корректно передать его на бэкенд через JSON.








